{
  "name": "KAFKA_MIRRORMAKER",
  "label": "Kafka MirrorMaker",
  "description": "Apache Kafka MirrorMaker is a replication tool for moving data between Kafka clusters. <span class=\"error\">Before adding this service, ensure that either the Kafka parcel is activated or the Kafka package is installed.</span>",
  "version": "1.4.0",
  "compatibility": {
    "generation": 1,
    "cdhVersion": {
      "min": "5",
      "max": "5"
    }
  },
  "runAs": {
    "user": "kafka",
    "group": "kafka"
  },
  "icon": "images/mirrormaker.png",
  "parcel": {
    "repoUrl": "https://archive.cloudera.com/kafka/parcels/latest/",
    "requiredTags": [
      "cdh",
      "kafka"
    ]
  },
  "inExpressWizard": true,
  "kerberos" : "${kerberos.auth.enable}",
  "parameters": [
    {
      "name": "zookeeper.chroot",
      "label": "ZooKeeper Root",
      "description": "ZNode in ZooKeeper that should be used as a root for this Kafka cluster.",
      "type": "string",
      "default": "",
      "configurableInWizard": true
    },
    {
      "name" : "kerberos.auth.enable",
      "label" : "Enable Kerberos Authentication",
      "description" : "Enable Kerberos authentication for this KAFKA service.",
      "type" : "boolean",
      "default" : "false",
      "configurableInWizard": true
    }
  ],
  "roles": [
    {
      "name": "KAFKA_MIRROR_MAKER",
      "label": "Kafka MirrorMaker",
      "pluralLabel": "Kafka MirrorMakers",
      "jvmBased": true,
      "startRunner": {
        "program": "scripts/mirrormaker_control.sh",
        "args": [
          "start"
        ],
        "environmentVariables": {
          "CHROOT": "${zookeeper.chroot}",
          "NO_DATA_LOSS": "${no.data.loss}",
          "WHITELIST": "${whitelist}",
          "BLACKLIST": "${blacklist}",
          "NUM_PRODUCERS": "${num.producers}",
          "NUM_STREAMS": "${num.streams}",
          "QUEUE_SIZE": "${queue.size}",
          "QUEUE_BYTE_SIZE": "${queue.byte.size}",
          "JMX_PORT": "${jmx_port}",
          "MM_HEAP_SIZE": "${mirror_maker_max_heap_size}",
          "MM_JAVA_OPTS": "${mirror_maker_java_opts}",
          "ABORT_ON_SEND_FAILURE": "${abort.on.send.failure}",
          "OFFSET_COMMIT_INTERVAL_MS": "${offset.commit.interval.ms}",
          "CONSUMER_REBALANCE_LISTENER": "${consumer.rebalance.listener}",
          "CONSUMER_REBALANCE_LISTENER_ARGS": "${consumer.rebalance.listener.args}",
          "MESSAGE_HANDLER": "${message.handler}",
          "MESSAGE_HANDLER_ARGS": "${message.handler.args}",
          "SOURCE_SECURITY_PROTOCOL": "${source.security.protocol}",
          "DESTINATION_SECURITY_PROTOCOL": "${destination.security.protocol}",
          "SOURCE_SSL_CLIENT_AUTH": "${source.ssl.client.auth}",
          "DESTINATION_SSL_CLIENT_AUTH": "${destination.ssl.client.auth}"
        }
      },
      "logging": {
        "dir": "/var/log/kafka-mirrormaker",
        "filename": "kafka-mirrormaker-${host}.log",
        "modifiable": true,
        "configName": "kafka_mirrormaker.log4j.dir",
        "loggingType": "log4j"
      },
      "topology": {
        "minInstances": "0"
      },
      "sslServer": {
        "keyIdentifier" : "kafka_mirror_maker",
        "enabledConfigName" : "ssl_enabled",
        "keystoreLocationConfigName" : "ssl.keystore.location",
        "keystorePasswordConfigName" : "ssl.keystore.password.generator",
        "keystorePasswordCredentialProviderCompatible" : false,
        "keystorePasswordScriptBased" : true,
        "keyPasswordOptionality" : "required",
        "keystoreKeyPasswordConfigName" : "ssl.key.password.generator",
        "keystoreKeyPasswordScriptBased" : true
      },
      "sslClient": {
        "truststoreLocationConfigName" : "ssl.truststore.location",
        "truststorePasswordConfigName" : "ssl.truststore.password.generator",
        "truststorePasswordScriptBased" : true
      },
      "kerberosPrincipals" : [
        {
          "name" : "KAFKA_MIRROR_MAKER_PRINCIPAL",
          "primary" : "kafka_mirror_maker",
          "instance" : "${host}"
        }
      ],
      "configWriter": {
        "generators": [
          {
            "filename": "mirror_maker_producers.properties",
            "configFormat": "properties",
            "includedParams": [
              "bootstrap.servers",
              "linger.ms",
              "compression.type",
              "batch.size",
              "buffer.memory"
            ],
            "additionalConfigs" : [
              {
                "key" : "request.timeout.ms",
                "value" : "${producer.request.timeout.ms}"
              },
              {
                "key" : "#ssl.configs",
                "value" : "{{SSL_CONFIGS}}"
              },
              {
                "key" : "security.protocol",
                "value" : "${destination.security.protocol}"
              },
              {
                "key" : "sasl.kerberos.service.name",
                "value" : "kafka"
              }
            ]
          },
          {
            "filename": "mirror_maker_consumers.properties",
            "configFormat": "properties",
            "includedParams": [
              "group.id",
              "session.timeout.ms",
              "fetch.min.bytes"
            ],
            "additionalConfigs" : [
              {
                "key" : "bootstrap.servers",
                "value" : "${source.bootstrap.servers}"
              },
              {
                "key" : "request.timeout.ms",
                "value" : "${consumer.request.timeout.ms}"
              },
              {
                "key" : "#ssl.configs",
                "value" : "{{SSL_CONFIGS}}"
              },
              {
                "key" : "security.protocol",
                "value" : "${source.security.protocol}"
              },
              {
                "key" : "sasl.kerberos.service.name",
                "value" : "kafka"
              }
            ]
          },
          {
            "filename": "ssl_server.properties",
            "configFormat": "properties",
            "includedParams": [
              "ssl_server_keystore_location",
              "ssl_server_keystore_password",
              "ssl_server_keystore_keypassword"
            ]
          },
          {
            "filename": "ssl_client.properties",
            "configFormat": "properties",
            "includedParams": [
              "ssl_client_truststore_location",
              "ssl_client_truststore_password"
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "group.id",
          "label": "Consumer Group ID",
          "description": "Name of the consumer group used by MirrorMaker. When multiple role instances are configured with the same topics and same group ID, the role instances load-balance replication for the topics. When multiple role instances are configured with the same topics but different group ID, each role instance replicates all the events for those topics - this can be used to replicate the source cluster into multiple destination clusters.",
          "type": "string",
          "default": "cloudera_mirrormaker"
        },
        {
          "name": "bootstrap.servers",
          "label": "Destination Broker List",
          "description": "List of brokers on destination cluster. This should be more than one, for high availability, but there's no need to list all brokers.",
          "type": "string",
          "required": "true",
          "configurableInWizard": true
        },
        {
          "name": "source.bootstrap.servers",
          "label": "Source Broker List",
          "description": "List of brokers on source cluster. This should be more than one, for high availability, but there's no need to list all brokers.",
          "type": "string",
          "required": "true",
          "configurableInWizard": true
        },
        {
          "name": "no.data.loss",
          "label": "Avoid Data Loss",
          "description": "Run with MirrorMaker settings that eliminate potential loss of data. This impacts performance, but is highly recommended. WARNING: Does not work with Kafka 2.0 or later.",
          "type": "boolean",
          "default": true
        },
        {
          "name": "whitelist",
          "label": "Topic Whitelist",
          "description": "Regular expression that represents a set of topics to mirror. Note that whitelist and blacklist parameters are mutually exclusive. If both are defined, only the whilelist is used.",
          "type": "string",
          "default": "",
          "configurableInWizard": true
        },
        {
          "name": "blacklist",
          "label": "Topic Blacklist",
          "description": "Regular expression that represents a set of topics to avoid mirroring. Note that whitelist and blacklist parameters are mutually exclusive. If both are defined, only the whilelist is used. WARNING: Does not work with Kafka 2.0 or later.",
          "type": "string",
          "default": "",
          "configurableInWizard": true
        },
        {
          "name": "num.producers",
          "label": "Number of Producers",
          "description": "Number of producer instances. WARNING: Does not work with Kafka 2.0 or later.",
          "type": "long",
          "default": 1,
          "min": 1
        },
        {
          "name": "num.streams",
          "label": "Number of Consumer Threads",
          "description": "Number of consumer threads.",
          "type": "long",
          "default": 1,
          "min": 1
        },
        {
          "name": "queue.size",
          "label": "Message Queue Size",
          "description": "Number of messages that are buffered between producer and consumer. WARNING: Does not work with Kafka 2.0 or later.",
          "type": "long",
          "default": 10000,
          "min": 1
        },
        {
          "name": "queue.byte.size",
          "label": "Queue Size",
          "description": "Maximum number of bytes that can be buffered between producer and consumer. WARNING: Does not work with Kafka 2.0 or later.",
          "type": "long",
          "default": 100000000,
          "unit": "bytes"
        },
        {
          "name": "jmx_port",
          "label": "JMX Port",
          "description": "Port for JMX.",
          "type": "port",
          "default": 9395
        },
        {
          "name": "abort.on.send.failure",
          "label": "Abort on Send Failure",
          "description": "Stop the entire mirror maker when a send failure occurs.",
          "type": "boolean",
          "default": true
        },
        {
          "name": "offset.commit.interval.ms",
          "label": "Offset Commit Interval",
          "description": "Offset commit interval in milliseconds.",
          "type": "long",
          "default": 60000,
          "min": 1
        },
        {
          "name": "linger.ms",
          "label": "Producer Linger Time",
          "description": "The upper bound on the delay for batching. Once the producer gets a batch.size worth of records for a partition it will be sent immediately regardless of this setting. However if fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Only respected by Kafka 2.0 or later.",
          "type": "long",
          "default": 0,
          "min": 0,
          "unit": "milliseconds"
        },
        {
          "name": "batch.size",
          "label": "Producer Batch Size",
          "description": "This configuration controls the batch size in bytes. The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. Only respected by Kafka 2.0 or later.",
          "type": "long",
          "default": 16384,
          "min": 1,
          "max": 2147483647,
          "unit": "bytes"
        },
        {
          "name": "buffer.memory",
          "label": "Producer Buffer Memory",
          "description": "The total bytes of memory the producer can use to buffer records waiting to be sent to the server. Only respected by Kafka 2.0 or later.",
          "type": "long",
          "default": 33554432,
          "min": 1,
          "unit": "bytes"
        },
        {
          "name": "compression.type",
          "label": "Producer Compression Type",
          "description": "The compression type for all data generated by the producer. Only respected by Kafka 2.0 or later.",
          "type": "string_enum",
          "validValues" : [ "none", "snappy", "gzip" ],
          "default": "none"
        },
        {
          "name": "producer.request.timeout.ms",
          "label": "Producer Request Timeout",
          "description": "The maximum amount of time the producer will wait for the response of a request. If the response is not received before the timeout elapses the producer will resend the request if necessary or fail the request if retries are exhausted. Only respected by Kafka 2.0 or later.",
          "type": "long",
          "default": 30000,
          "min": 1,
          "max": 2147483647,
          "unit": "milliseconds"
        },
        {
          "name": "consumer.request.timeout.ms",
          "label": "Consumer Request Timeout",
          "description": "The maximum amount of time the consumer will wait for the response of a request. If the response is not received before the timeout elapses the consumer will resend the request if necessary or fail the request if retries are exhausted. Only respected by Kafka 2.0 or later.",
          "type": "long",
          "default": 40000,
          "min": 1,
          "max": 2147483647,
          "unit": "milliseconds"
        },
        {
          "name": "session.timeout.ms",
          "label": "Consumer Session Timeout",
          "description": "The timeout used to detect failures when using Kafka's group management facilities. When a consumer's heartbeat is not received within the session timeout, the broker will mark the consumer as failed and rebalance the group. Note that the value must be in the allowable range as configured in the broker by group.min.session.timeout.ms and group.max.session.timeout.ms. Only respected by Kafka 2.0 or later.",
          "type": "long",
          "default": 30000,
          "min": 1,
          "max": 2147483647,
          "unit": "milliseconds"
        },
        {
          "name": "fetch.min.bytes",
          "label": "Consumer Minimum Fetch Size",
          "description": "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.",
          "type": "long",
          "default": 1,
          "min": 1,
          "max": 2147483647,
          "unit": "bytes"
        },
        {
          "name": "consumer.rebalance.listener",
          "label": "MirrorMaker Consumer Rebalance Listener",
          "description": "A consumer rebalance listener of type ConsumerRebalanceListener to be invoked when MirrorMaker's consumer rebalances.",
          "type": "string",
          "default": ""
        },
        {
          "name": "consumer.rebalance.listener.args",
          "label": "MirrorMaker Consumer Rebalance Listener Arguments",
          "description": "Arguments used by MirrorMaker consumer rebalance listener.",
          "type": "string",
          "default": ""
        },
        {
          "name": "message.handler",
          "label": "MirrorMaker Message Handler",
          "description": "A MirrorMaker message handler of type MirrorMakerMessageHandler that will process every record in-between producer and consumer.",
          "type": "string",
          "default": ""
        },
        {
          "name": "message.handler.args",
          "label": "MirrorMaker Message Handler Arguments",
          "description": "Arguments used by MirrorMaker message handler.",
          "type": "string",
          "default": ""
        },
        {
          "name": "source.security.protocol",
          "label": "Source Kafka Cluster's Security Protocol",
          "description": "Protocol to be used for communication with source kafka cluster.",
          "type": "string_enum",
          "validValues" : [ "PLAINTEXT", "SSL", "SASL_PLAINTEXT", "SASL_SSL" ],
          "default": "PLAINTEXT"
        },
        {
          "name": "destination.security.protocol",
          "label": "Destination Kafka Cluster's Security Protocol",
          "description": "Protocol to be used for communication with destination kafka cluster.",
          "type": "string_enum",
          "validValues" : [ "PLAINTEXT", "SSL", "SASL_PLAINTEXT", "SASL_SSL" ],
          "default": "PLAINTEXT"
        },
        {
          "name": "source.ssl.client.auth",
          "label": "Source Kafka Cluster's Client Auth",
          "description": "Only required if source Kafka cluster requires client authentication.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "destination.ssl.client.auth",
          "label": "Destination Kafka Cluster's Client Auth",
          "description": "Only required if destination Kafka cluster requires client authentication.",
          "type": "boolean",
          "default": false
        },
        {
          "name": "mirror_maker_max_heap_size",
          "label": "Java Heap Size of MirrorMaker",
          "description": "Maximum size for the Java process heap memory. Passed to Java -Xmx. Measured in megabytes.",
          "type": "memory",
          "default": 1024,
          "min": 50,
          "softMin": 256,
          "softMax": 16384,
          "unit": "megabytes",
          "scaleFactor" : 1.3
        },
        {
          "name": "mirror_maker_java_opts",
          "label": "Additional MirrorMaker Java Options",
          "description": "These arguments are passed as part of the Java command line. Commonly, garbage collection flags or extra debugging flags are passed here.",
          "type": "string",
          "default": "-server -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -XX:+CMSScavengeBeforeRemark -XX:+DisableExplicitGC -Djava.awt.headless=true"
        }
      ]
    }
  ],
  "rollingRestart": {
    "nonWorkerSteps": [
      {
        "roleName": "KAFKA_MIRROR_MAKER",
        "bringUpCommands": [ "Start" ],
        "bringDownCommands": [ "Stop" ]
      }
    ]
  }
}

